# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import redisproxy_pb2 as redisproxy__pb2


class RedisProxyServiceStub(object):
  """定义redisProxyService，对 Redis 操作的代理接口
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RedisProxyCmd = channel.unary_unary(
        '/RedisProxy.RedisProxyService/RedisProxyCmd',
        request_serializer=redisproxy__pb2.RedisProxyRequest.SerializeToString,
        response_deserializer=redisproxy__pb2.RedisProxyResponse.FromString,
        )


class RedisProxyServiceServicer(object):
  """定义redisProxyService，对 Redis 操作的代理接口
  """

  def RedisProxyCmd(self, request, context):
    """对 Redis 执行操作的代理函数，支持绝大多数命令
    输入：RedisProxyRequest
    输出：RedisProxyResponse
    返回值：Status
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RedisProxyServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RedisProxyCmd': grpc.unary_unary_rpc_method_handler(
          servicer.RedisProxyCmd,
          request_deserializer=redisproxy__pb2.RedisProxyRequest.FromString,
          response_serializer=redisproxy__pb2.RedisProxyResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'RedisProxy.RedisProxyService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
